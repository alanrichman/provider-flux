// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GitInitParameters struct {

	// The internal cluster domain. Defaults to `cluster.local`
	ClusterDomain *string `json:"clusterDomain,omitempty" tf:"cluster_domain,omitempty"`

	// Toolkit components to include in the install manifests. Defaults to `[source-controller kustomize-controller helm-controller notification-controller]`
	// +listType=set
	Components []*string `json:"components,omitempty" tf:"components,omitempty"`

	// List of extra components to include in the install manifests.
	// +listType=set
	ComponentsExtra []*string `json:"componentsExtra,omitempty" tf:"components_extra,omitempty"`

	// Delete manifests from git repository. Defaults to `true`.
	DeleteGitManifests *bool `json:"deleteGitManifests,omitempty" tf:"delete_git_manifests,omitempty"`

	// Use the existing secret for flux controller and don't create one from bootstrap
	DisableSecretCreation *bool `json:"disableSecretCreation,omitempty" tf:"disable_secret_creation,omitempty"`

	// When enabled, the Flux manifests will be extracted from the provider binary instead of being downloaded from GitHub.com. Defaults to `false`.
	EmbeddedManifests *bool `json:"embeddedManifests,omitempty" tf:"embedded_manifests,omitempty"`

	// Kubernetes secret name used for pulling the toolkit images from a private registry.
	ImagePullSecret *string `json:"imagePullSecret,omitempty" tf:"image_pull_secret,omitempty"`

	// Interval at which to reconcile from bootstrap repository. Defaults to `1m0s`.
	Interval *string `json:"interval,omitempty" tf:"interval,omitempty"`

	// Keep the namespace after uninstalling Flux components. Defaults to `false`.
	KeepNamespace *bool `json:"keepNamespace,omitempty" tf:"keep_namespace,omitempty"`

	// Kustomization to override configuration set by default.
	KustomizationOverride *string `json:"kustomizationOverride,omitempty" tf:"kustomization_override,omitempty"`

	// Log level for toolkit components. Defaults to `info`.
	LogLevel *string `json:"logLevel,omitempty" tf:"log_level,omitempty"`

	// The install manifests are built from a GitHub release or kustomize overlay if using a local path. Defaults to `https://github.com/fluxcd/flux2/releases`.
	ManifestsPath *string `json:"manifestsPath,omitempty" tf:"manifests_path,omitempty"`

	// The namespace scope for install manifests. Defaults to `flux-system`. It will be created if it does not exist.
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Deny ingress access to the toolkit controllers from other namespaces using network policies. Defaults to `true`.
	NetworkPolicy *bool `json:"networkPolicy,omitempty" tf:"network_policy,omitempty"`

	// Path relative to the repository root, when specified the cluster sync will be scoped to this path (immutable).
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Configures the GitRepository source to initialize and include Git submodules in the artifact it produces.
	RecurseSubmodules *bool `json:"recurseSubmodules,omitempty" tf:"recurse_submodules,omitempty"`

	// Container registry where the toolkit images are published. Defaults to `ghcr.io/fluxcd`.
	Registry *string `json:"registry,omitempty" tf:"registry,omitempty"`

	// Container registry credentials in the format 'user:password'
	RegistryCredentials *string `json:"registryCredentials,omitempty" tf:"registry_credentials,omitempty"`

	// Name of the secret the sync credentials can be found in or stored to. Defaults to `flux-system`.
	SecretName *string `json:"secretName,omitempty" tf:"secret_name,omitempty"`

	Timeouts map[string]string `json:"timeouts,omitempty" tf:"timeouts,omitempty"`

	// List of toleration keys used to schedule the components pods onto nodes with matching taints.
	// +listType=set
	TolerationKeys []*string `json:"tolerationKeys,omitempty" tf:"toleration_keys,omitempty"`

	// Flux version. Defaults to `v2.6.4`. Has no effect when `embedded_manifests` is enabled.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`

	// If true watch for custom resources in all namespaces. Defaults to `true`.
	WatchAllNamespaces *bool `json:"watchAllNamespaces,omitempty" tf:"watch_all_namespaces,omitempty"`
}

type GitObservation struct {

	// The internal cluster domain. Defaults to `cluster.local`
	ClusterDomain *string `json:"clusterDomain,omitempty" tf:"cluster_domain,omitempty"`

	// Toolkit components to include in the install manifests. Defaults to `[source-controller kustomize-controller helm-controller notification-controller]`
	// +listType=set
	Components []*string `json:"components,omitempty" tf:"components,omitempty"`

	// List of extra components to include in the install manifests.
	// +listType=set
	ComponentsExtra []*string `json:"componentsExtra,omitempty" tf:"components_extra,omitempty"`

	// Delete manifests from git repository. Defaults to `true`.
	DeleteGitManifests *bool `json:"deleteGitManifests,omitempty" tf:"delete_git_manifests,omitempty"`

	// Use the existing secret for flux controller and don't create one from bootstrap
	DisableSecretCreation *bool `json:"disableSecretCreation,omitempty" tf:"disable_secret_creation,omitempty"`

	// When enabled, the Flux manifests will be extracted from the provider binary instead of being downloaded from GitHub.com. Defaults to `false`.
	EmbeddedManifests *bool `json:"embeddedManifests,omitempty" tf:"embedded_manifests,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Kubernetes secret name used for pulling the toolkit images from a private registry.
	ImagePullSecret *string `json:"imagePullSecret,omitempty" tf:"image_pull_secret,omitempty"`

	// Interval at which to reconcile from bootstrap repository. Defaults to `1m0s`.
	Interval *string `json:"interval,omitempty" tf:"interval,omitempty"`

	// Keep the namespace after uninstalling Flux components. Defaults to `false`.
	KeepNamespace *bool `json:"keepNamespace,omitempty" tf:"keep_namespace,omitempty"`

	// Kustomization to override configuration set by default.
	KustomizationOverride *string `json:"kustomizationOverride,omitempty" tf:"kustomization_override,omitempty"`

	// Log level for toolkit components. Defaults to `info`.
	LogLevel *string `json:"logLevel,omitempty" tf:"log_level,omitempty"`

	// The install manifests are built from a GitHub release or kustomize overlay if using a local path. Defaults to `https://github.com/fluxcd/flux2/releases`.
	ManifestsPath *string `json:"manifestsPath,omitempty" tf:"manifests_path,omitempty"`

	// The namespace scope for install manifests. Defaults to `flux-system`. It will be created if it does not exist.
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Deny ingress access to the toolkit controllers from other namespaces using network policies. Defaults to `true`.
	NetworkPolicy *bool `json:"networkPolicy,omitempty" tf:"network_policy,omitempty"`

	// Path relative to the repository root, when specified the cluster sync will be scoped to this path (immutable).
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Configures the GitRepository source to initialize and include Git submodules in the artifact it produces.
	RecurseSubmodules *bool `json:"recurseSubmodules,omitempty" tf:"recurse_submodules,omitempty"`

	// Container registry where the toolkit images are published. Defaults to `ghcr.io/fluxcd`.
	Registry *string `json:"registry,omitempty" tf:"registry,omitempty"`

	// Container registry credentials in the format 'user:password'
	RegistryCredentials *string `json:"registryCredentials,omitempty" tf:"registry_credentials,omitempty"`

	// Git repository files created and managed by the provider.
	// +mapType=granular
	RepositoryFiles map[string]*string `json:"repositoryFiles,omitempty" tf:"repository_files,omitempty"`

	// Name of the secret the sync credentials can be found in or stored to. Defaults to `flux-system`.
	SecretName *string `json:"secretName,omitempty" tf:"secret_name,omitempty"`

	Timeouts map[string]string `json:"timeouts,omitempty" tf:"timeouts,omitempty"`

	// List of toleration keys used to schedule the components pods onto nodes with matching taints.
	// +listType=set
	TolerationKeys []*string `json:"tolerationKeys,omitempty" tf:"toleration_keys,omitempty"`

	// Flux version. Defaults to `v2.6.4`. Has no effect when `embedded_manifests` is enabled.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`

	// If true watch for custom resources in all namespaces. Defaults to `true`.
	WatchAllNamespaces *bool `json:"watchAllNamespaces,omitempty" tf:"watch_all_namespaces,omitempty"`
}

type GitParameters struct {

	// The internal cluster domain. Defaults to `cluster.local`
	// +kubebuilder:validation:Optional
	ClusterDomain *string `json:"clusterDomain,omitempty" tf:"cluster_domain,omitempty"`

	// Toolkit components to include in the install manifests. Defaults to `[source-controller kustomize-controller helm-controller notification-controller]`
	// +kubebuilder:validation:Optional
	// +listType=set
	Components []*string `json:"components,omitempty" tf:"components,omitempty"`

	// List of extra components to include in the install manifests.
	// +kubebuilder:validation:Optional
	// +listType=set
	ComponentsExtra []*string `json:"componentsExtra,omitempty" tf:"components_extra,omitempty"`

	// Delete manifests from git repository. Defaults to `true`.
	// +kubebuilder:validation:Optional
	DeleteGitManifests *bool `json:"deleteGitManifests,omitempty" tf:"delete_git_manifests,omitempty"`

	// Use the existing secret for flux controller and don't create one from bootstrap
	// +kubebuilder:validation:Optional
	DisableSecretCreation *bool `json:"disableSecretCreation,omitempty" tf:"disable_secret_creation,omitempty"`

	// When enabled, the Flux manifests will be extracted from the provider binary instead of being downloaded from GitHub.com. Defaults to `false`.
	// +kubebuilder:validation:Optional
	EmbeddedManifests *bool `json:"embeddedManifests,omitempty" tf:"embedded_manifests,omitempty"`

	// Kubernetes secret name used for pulling the toolkit images from a private registry.
	// +kubebuilder:validation:Optional
	ImagePullSecret *string `json:"imagePullSecret,omitempty" tf:"image_pull_secret,omitempty"`

	// Interval at which to reconcile from bootstrap repository. Defaults to `1m0s`.
	// +kubebuilder:validation:Optional
	Interval *string `json:"interval,omitempty" tf:"interval,omitempty"`

	// Keep the namespace after uninstalling Flux components. Defaults to `false`.
	// +kubebuilder:validation:Optional
	KeepNamespace *bool `json:"keepNamespace,omitempty" tf:"keep_namespace,omitempty"`

	// Kustomization to override configuration set by default.
	// +kubebuilder:validation:Optional
	KustomizationOverride *string `json:"kustomizationOverride,omitempty" tf:"kustomization_override,omitempty"`

	// Log level for toolkit components. Defaults to `info`.
	// +kubebuilder:validation:Optional
	LogLevel *string `json:"logLevel,omitempty" tf:"log_level,omitempty"`

	// The install manifests are built from a GitHub release or kustomize overlay if using a local path. Defaults to `https://github.com/fluxcd/flux2/releases`.
	// +kubebuilder:validation:Optional
	ManifestsPath *string `json:"manifestsPath,omitempty" tf:"manifests_path,omitempty"`

	// The namespace scope for install manifests. Defaults to `flux-system`. It will be created if it does not exist.
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Deny ingress access to the toolkit controllers from other namespaces using network policies. Defaults to `true`.
	// +kubebuilder:validation:Optional
	NetworkPolicy *bool `json:"networkPolicy,omitempty" tf:"network_policy,omitempty"`

	// Path relative to the repository root, when specified the cluster sync will be scoped to this path (immutable).
	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Configures the GitRepository source to initialize and include Git submodules in the artifact it produces.
	// +kubebuilder:validation:Optional
	RecurseSubmodules *bool `json:"recurseSubmodules,omitempty" tf:"recurse_submodules,omitempty"`

	// Container registry where the toolkit images are published. Defaults to `ghcr.io/fluxcd`.
	// +kubebuilder:validation:Optional
	Registry *string `json:"registry,omitempty" tf:"registry,omitempty"`

	// Container registry credentials in the format 'user:password'
	// +kubebuilder:validation:Optional
	RegistryCredentials *string `json:"registryCredentials,omitempty" tf:"registry_credentials,omitempty"`

	// Name of the secret the sync credentials can be found in or stored to. Defaults to `flux-system`.
	// +kubebuilder:validation:Optional
	SecretName *string `json:"secretName,omitempty" tf:"secret_name,omitempty"`

	// +kubebuilder:validation:Optional
	Timeouts map[string]string `json:"timeouts,omitempty" tf:"timeouts,omitempty"`

	// List of toleration keys used to schedule the components pods onto nodes with matching taints.
	// +kubebuilder:validation:Optional
	// +listType=set
	TolerationKeys []*string `json:"tolerationKeys,omitempty" tf:"toleration_keys,omitempty"`

	// Flux version. Defaults to `v2.6.4`. Has no effect when `embedded_manifests` is enabled.
	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`

	// If true watch for custom resources in all namespaces. Defaults to `true`.
	// +kubebuilder:validation:Optional
	WatchAllNamespaces *bool `json:"watchAllNamespaces,omitempty" tf:"watch_all_namespaces,omitempty"`
}

// GitSpec defines the desired state of Git
type GitSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GitParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider GitInitParameters `json:"initProvider,omitempty"`
}

// GitStatus defines the observed state of Git.
type GitStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GitObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Git is the Schema for the Gits API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,flux}
type Git struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GitSpec   `json:"spec"`
	Status            GitStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GitList contains a list of Gits
type GitList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Git `json:"items"`
}

// Repository type metadata.
var (
	Git_Kind             = "Git"
	Git_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Git_Kind}.String()
	Git_KindAPIVersion   = Git_Kind + "." + CRDGroupVersion.String()
	Git_GroupVersionKind = CRDGroupVersion.WithKind(Git_Kind)
)

func init() {
	SchemeBuilder.Register(&Git{}, &GitList{})
}
